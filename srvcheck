#!/bin/bash

# Set report file
F=/var/log/srvcheck/srvchk-$(date +%Y_%m_%d).csv

# SLF001
p=$(id | awk '{ print $1 }')
if [ $p != "uid=0(root)" ]
then
    self001="SLF001,2,$(date +%Y%m%d-%H%M%S),No root permission"
    echo $self001
    exit 0
else
    self001="SLF001,0,$(date +%Y%m%d-%H%M%S),"
fi

# SLF002
missing=0
if [ ! -e /usr/bin/top ]
then
    let missing++
fi

if [ ! -e /usr/bin/curl ]
then
    let missing++
fi

if [ ! -e /usr/bin/rsync ]
then
    let missing++
fi

if [ ! -e /opt/lynis/lynis ]
then
    let missing++
fi

if [ ! -e /usr/bin/netstat ]
then
    if [ ! -e /bin/netstat ]
    then
        let missing++
    fi
fi

if [[ ! $missing -eq 0 ]]
then
    self002="SLF002,2,$(date +%Y%m%d-%H%M%S),Missing srvcheck dependencies"
    echo $self002
    exit 0
else
    self002="SLF002,0,$(date +%Y%m%d-%H%M%S),"
fi


# SLF003
if [ ! -d /var/log/srvcheck ]
then
    self003="SLF003,1,$(date +%Y%m%d-%H%M%S),First run of srvcheck"
    mkdir /var/log/srvcheck
else
    self003="SLF003,0,$(date +%Y%m%d-%H%M%S),"
fi

# SLF004
if [[ ! -e $F ]]
then
    self004="SLF004,0,$(date +%Y%m%d-%H%M%S),"
    touch $F
else
    self004="SLF004,1,$(date +%Y%m%d-%H%M%S),Log file already exist overwriting."
fi

echo "CheckID,ResultCode,Timestamp,Notes" > $F
echo $self001 >> $F
echo $self002 >> $F
echo $self003 >> $F
echo $self004 >> $F

# SYS001
distro=$(cat /etc/os-release | grep '^ID=.*' | sed s/ID=//)
echo "SYS001,0,$(date +%Y%m%d-%H%M%S),Distro: $distro" >> $F

# SYS002
echo "SYS002,0,$(date +%Y%m%d-%H%M%S),Hostname: $HOSTNAME" >> $F

# SYS003
echo "SYS003,0,$(date +%Y%m%d-%H%M%S),kernel: $(uname -r)" >> $F

# SYS004
u=$(uptime | awk '{ print $4 }' | sed 's/,/./g')

if [ $u == "days." ]
then
    echo "SYS004,0,$(date +%Y%m%d-%H%M%S),$(uptime | awk '{ print $3 " " $4 }')" >> $F
else
    echo "SYS004,1,$(date +%Y%m%d-%H%M%S),Running for less then 1 day: $(uptime | awk '{ print $3 " " $4 }')" >> $F
fi

# SYS005
U=$(curl -I -k google.it | grep "Date:" | awk '{ print $3 " " $5 " " $6 }')
L=$(date -u +"%d %Y %T")
if [[ $U != $L ]]
then
    echo "SYS005,2,$(date +%Y%m%d-%H%M%S),InternetTime: $U - SysTime: $L" >> $F
else
    echo "SYS005,0,$(date +%Y%m%d-%H%M%S)," >> $F
fi

# SYS006
vm=0
container=0
if [ -e /dev/mem ]
then
    m=$(dmidecode -s system-manufacturer)

    case $m in
    QEMU)
    vm=1
    echo "SYS006,0,$(date +%Y%m%d-%H%M%S),Virtualized system (QEMU)" >> $F
    ;;
    "innotek GmbH")
    vm=1
    echo "SYS006,0,$(date +%Y%m%d-%H%M%S),Virtualized system (Virtualbox)" >> $F
    ;;
    *)
    vm=0
    echo "SYS006,0,$(date +%Y%m%d-%H%M%S),Physical installation" >> $F
    ;;
    esac
else
    container=1
    echo "SYS006,0,$(date +%Y%m%d-%H%M%S),Containerized system" >> $F
fi

# SYS007
if [ $container -eq 0 ]
then
    rootFs=$(df --output=target,fstype | grep -e '/\s.*' | awk '{ print $2 }')
    echo "SYS007,0,$(date +%Y%m%d-%H%M%S),Root FS: $rootFs" >> $F
else
    echo "SYS007,0,$(date +%Y%m%d-%H%M%S),Container: $container - Skipping" >> $F
fi

# SYS008
if [[ $container -eq 0 && $vm -eq 0 ]]
then
    t=$(sensors -u | grep -e "temp1_input:.*" | awk '{ print $2 }' | sort -rn | head -n 1)
    case $t in
    [6-7][0-9].*)
    echo "SYS008,1,$(date +%Y%m%d-%H%M%S),CPU Temp: $t °C" >> $F
    ;;
    [8-9][0-9].*)
    echo "SYS008,2,$(date +%Y%m%d-%H%M%S),CPU Temp: $t °C" >> $F
    ;;
    *)
    echo "SYS008,0,$(date +%Y%m%d-%H%M%S),CPU Temp: $t °C" >> $F
    ;;
    esac
else
    echo "SYS008,0,$(date +%Y%m%d-%H%M%S),VM/Container - Skipping" >> $F
fi

# SYS009
# TODO

# SYS010
if [[ $container -eq 0 && $vm -eq 0 ]]
then
    devices=( '/dev/sda' '/dev/sdb' '/dev/sdc' '/dev/sdd' '/dev/sde' '/dev/sdf' '/dev/sdg' '/dev/sdh' )
    
    for i in "${devices[@]}"
    do
        t=$(hddtemp $i 2>/dev/null | awk '{ print $NF }' | sed s/[°C]//g)
        case $t in
        [6-7][0-9])
        echo "SYS010,1,$(date +%Y%m%d-%H%M%S),$i Temp: $t °C" >> $F
        ;;
        [8-9][0-9])
        echo "SYS010,2,$(date +%Y%m%d-%H%M%S),$i Temp:  $t °C" >> $F
        ;;
        "")
        echo "$i not found"
        ;;
        *)
        echo "SYS010,0,$(date +%Y%m%d-%H%M%S),$i Temp:  $t °C" >> $F
        ;;
        esac
    done
else
    echo "SYS010,0,$(date +%Y%m%d-%H%M%S),VM/Containar - Skipping" >> $F
fi

# STO001
u=$(df --output=target,pcent | grep -e '/\s.*' | awk '{ print $2 }' | sed 's/%//')

case $u in
[5-6][0-9])
echo "STO001,1,$(date +%Y%m%d-%H%M%S),High / Used: $u %" >> $F
;;
[7-9][0-9])
echo "STO001,2,$(date +%Y%m%d-%H%M%S),Critical / Used: $u %" >> $F
;;
100)
echo "STO001,2,$(date +%Y%m%d-%H%M%S),Critical / Used: $u %" >> $F
;;
*)
echo "STO001,0,$(date +%Y%m%d-%H%M%S),/ Used: $u %" >> $F
;;
esac

# STO002
u=$(df --output=target,pcent | grep -e '/home\s.*' | awk '{ print $2 }' | sed 's/%//')

case $u in
[5-6][0-9])
echo "STO002,1,$(date +%Y%m%d-%H%M%S),High /home Used: $u %" >> $F
;;
[7-9][0-9])
echo "STO002,2,$(date +%Y%m%d-%H%M%S),Critical /home Used: $u %" >> $F
;;
100)
echo "STO002,2,$(date +%Y%m%d-%H%M%S),Critical /home Used: $u %" >> $F
;;
"")
echo "STO002,0,$(date +%Y%m%d-%H%M%S),No partition for /home" >> $F
;;
*)
echo "STO002,0,$(date +%Y%m%d-%H%M%S),/home Used: $u %" >> $F
;;
esac

# STO003
which vgs
if [ $? -eq 0 ]
then
    n=$(vgs -o vg_name --units G --noheadings | sed 's/\s//g')

    for i in $n
    do
        v=$(vgs -o vg_name,vg_free --units G --noheadings | grep $i | sed 's/[\sG]//g' | awk '{ print $2 }')
        case $v in
        [0-9].*)
        echo "STO003,2,$(date +%Y%m%d-%H%M%S),Critical free space: $i $v G" >> $F
        ;;
        [0-1][0-9].*)
        echo "STO003,1,$(date +%Y%m%d-%H%M%S),Low free space: $i $v G" >> $F
        ;;
        "")
        echo "STO003,0,$(date +%Y%m%d-%H%M%S),No Volume Group" >> $F
        ;;
        *)
        echo "STO003,0,$(date +%Y%m%d-%H%M%S),Volume free space: $i $v G" >> $F
        ;;
        esac
    done
else
    echo "STO003,0,$(date +%Y%m%d-%H%M%S),No LVM" >> $F
fi

# STO004
if [[ $vm -eq 0 && $container -eq 0 ]]
then
    devices=( '/dev/sda' '/dev/sdb' '/dev/sdc' '/dev/sdd' '/dev/sde' '/dev/sdf' '/dev/sdg' '/dev/sdh' )

    for i in "${devices[@]}"
    do
        t=$(smartctl -a $i | grep "SMART overall-health self-assessment test result:.*" | sed 's/^.*: //')
        if [[ $t == "PASSED" ]]
        then
        echo "STO004,0,$(date +%Y%m%d-%H%M%S),$i SMART $t" >> $F
        elif [[ $t == "" ]]
        then
        echo "Device not found"
        else
        echo "STO004,1,$(date +%Y%m%d-%H%M%S),$i SMART $t" >> $F
        fi
    done
else
    echo "STO004,0,$(date +%Y%m%d-%H%M%S),VM/Container - Skipping" >> $F
fi

# STO005
zfs=$(zpool status | grep -e 'DEGRADED|FAULTED' | awk '{ print $1 $2 }')

if [[ $zfs == "" ]]
then
    echo "STO005,0,$(date +%Y%m%d-%H%M%S)," >> $F
else
    echo "STO005,2,$(date +%Y%m%d-%H%M%S),$zfs" >> $F
fi

# MEM001
t=$(free | grep -e 'Mem:.*' | awk '{ print $2 }')
echo "MEM001,0,$(date +%Y%m%d-%H%M%S),System Total Memory: $(( t / 1000000 )) G" >> $F

# MEM002
f=$(free | grep -e 'Mem:.*' | awk '{ print $3 }')
let "f = $t - $f"
if [ $f -lt 2024000 ]
then
    echo "MEM002,1,$(date +%Y%m%d-%H%M%S),Low Free Memory: $(( f / 1000000 )) G" >> $F
else
    echo "MEM002,0,$(date +%Y%m%d-%H%M%S),System Free Memory: $(( f / 1000000 )) G" >> $F
fi

# MEM003
u=$(free | grep -e 'Mem:.*' | awk '{ print $3 }')
let "p = 100 * $u / $t"

case $p in
[5-7][0-9])
echo "MEM003,1,$(date +%Y%m%d-%H%M%S),High Mem Used: $p %" >> $F
;;
[8-9][0-9])
echo "MEM003,2,$(date +%Y%m%d-%H%M%S),Critical Mem Used: $p %" >> $F
;;
*)
echo "MEM003,0,$(date +%Y%m%d-%H%M%S),Mem Used: $p %" >> $F
;;
esac

# MEM004
if [[ $distro == alpine ]]
then
    p=$(top -bn 1 | awk '{ print $6 " " $9 }' | grep -e '^[0-9]' | sort -rn | head -n 1)
else
    p=$(top -bn 1 -o +%MEM | grep -e '^\s.*' | head -n 2 | tail -n 1 | awk '{ print $10 "%" " " $12 }' | sed 's/,/./g')
fi
echo "MEM004,0,$(date +%Y%m%d-%H%M%S),$p" >> $F

# CPU001
n=$(dmidecode --type=processor | grep Version.* | sed 's/Version: //g')
echo "CPU001,0,$(date +%Y%m%d-%H%M%S),CPU: $n" >> $F

# CPU002
n=$(dmidecode --type=processor | grep "Thread Count.*" | sed 's/Thread Count: //g')
echo "CPU002,0,$(date +%Y%m%d-%H%M%S),Thread Count: $n" >> $F

# CPU003
c=$(top -bn 1 | grep -e '^%Cpu.*\|^CPU.*' | awk '{ print $2 }' | sed 's/%//' | sed 's/,/./g')

case $c in
[5-7][0-9][,][0-9])
echo "CPU003,1,$(date +%Y%m%d-%H%M%S),High Cpu Used: $c %" >> $F
;;
[8-9][0-9][,][0-9])
echo "CPU003,2,$(date +%Y%m%d-%H%M%S),Critical Cpu Used: $c %" >> $F
;;
*)
echo "CPU003,0,$(date +%Y%m%d-%H%M%S),Cpu Used: $c %" >> $F
;;
esac

# CPU004
if [[ $distro == alpine ]]
then
    p=$(top -bn 1 | awk '{ print $8 " " $9 }' | grep -e '^[0-9]' | sort -rn | head -n 1)
else
    p=$(top -bn 1 -o +%CPU | grep -e '^\s.*' | head -n 2 | tail -n 1 | awk '{ print $9 "%" " " $12 }' | sed 's/,/./g')
fi
echo "CPU004,0,$(date +%Y%m%d-%H%M%S),$p" >> $F

# SVC001
# TODO

# SVC002
case $distro in
alpine)
s=$(rc-status | grep -e '.*stopped.*' | awk '{ print $1 }')
;;
*)
s=$(systemctl list-units --state=failed | grep -e '.*service$' | awk '{ print $2 }')
;;
esac

if [[ $s == "" ]]
then
    echo "SVC002,0,$(date +%Y%m%d-%H%M%S)," >> $F
else
    echo "SVC002,2,$(date +%Y%m%d-%H%M%S),Failed/Stopped: $s" >> $F
fi

if [[ $container -eq 0 && $vm -eq 0 ]]
then
    # VME001
    qemu=0
    if [ -e /usr/sbin/qm ]
    then
        qemu=1
        echo "VME001,0,$(date +%Y%m%d-%H%M%S),QEMU/KVM: $qemu" >> $F
    else
        echo "VME001,0,$(date +%Y%m%d-%H%M%S),QEMU/KVM: $qemu" >> $F
    fi

    # VME002
    lxc=0
    if [ -e /usr/bin/lxc-ls ]
    then
        lxc=1
        echo "VME002,0,$(date +%Y%m%d-%H%M%S),LXC: $lxc" >> $F
    else
        echo "VME002,0,$(date +%Y%m%d-%H%M%S),LXC: $lxc" >> $F
    fi

    # VME003
    # TODO

else
    echo "VME001,0,$(date +%Y%m%d-%H%M%S),Containerized/Virtualized system: Skipping" >> $F
    echo "VME002,0,$(date +%Y%m%d-%H%M%S),Containerized/Virtualized system: Skipping" >> $F
    echo "VME003,0,$(date +%Y%m%d-%H%M%S),Containerized/Virtualized system: Skipping" >> $F
    echo "VME004,0,$(date +%Y%m%d-%H%M%S),Containerized/Virtualized system: Skipping" >> $F
    echo "VME005,0,$(date +%Y%m%d-%H%M%S),Containerized/Virtualized system: Skipping" >> $F
fi

# VME004
if [ $qemu -eq 1 ]
then
    qemu_stopped=$(qm list | grep stopped)
    if [[ $qemu_stopped == "" ]]
    then
        echo "VME004,0,$(date +%Y%m%d-%H%M%S)," >> $F
    else
        echo "VME004,2,$(date +%Y%m%d-%H%M%S),VM Stopped: $qemu_stopped" >> $F
    fi
fi

# VME005
if [ $lxc -eq 1 ]
then
    lxc_stopped=$(lxc-ls --stopped)
    if [[ $lxc_stopped == "" ]]
    then
        echo "VME005,0,$(date +%Y%m%d-%H%M%S)," >> $F
    else
        echo "VME005,2,$(date +%Y%m%d-%H%M%S),LXC Stopped: $lxc_stopped" >> $F
    fi
fi

# BKP001
restic=0

if [[ -e /usr/bin/restic && -e /var/log/restic.log ]]
then
    restic=1
    echo "BKP001,0,$(date +%Y%m%d-%H%M%S),Restic backup used" >> $F
else
    echo "BKP001,1,$(date +%Y%m%d-%H%M%S),Restic backup not found" >> $F
fi

bkpPartition=/mnt/bkp

# BKP002
u=$(df --output=target,pcent | grep -e "$bkpPartition.*" | awk '{ print $2 }' | sed 's/%//')

case $u in
[5-6][0-9])
echo "BKP002,1,$(date +%Y%m%d-%H%M%S),High $bkpPartition Used: $u %" >> $F
;;
[7-9][0-9])
echo "BKP002,2,$(date +%Y%m%d-%H%M%S),Critical $bkpPartition Used: $u %" >> $F
;;
100)
echo "BKP002,2,$(date +%Y%m%d-%H%M%S),Critical $bkpPartition Used: $u %" >> $F
;;
"")
echo "BKP002,1,$(date +%Y%m%d-%H%M%S),No partition for $bkpPartition" >> $F
;;
*)
echo "BKP002,0,$(date +%Y%m%d-%H%M%S),$bkpPartition Used: $u %" >> $F
;;
esac

# BKP003
if [ $restic -eq 1 ]
then
    T=$(cat /var/log/restic.log | tail -n 3 | head -n 1 | awk '{ print $2 }')
    if [[ ! $T = $(date +%Y-%m-%d) ]]
    then
        echo "BKP003,1,$(date +%Y%m%d-%H%M%S),Last Restic snapshot date: $T" >> $F
    else
        echo "BKP003,0,$(date +%Y%m%d-%H%M%S),Last Restic snapshot date: $T" >> $F
    fi
    
    # BKP004
    B=$(cat /var/log/restic.log | grep -e '.*snapshots$' | tail -n 1 | awk '{ print $1 }')
    
    case $B in
    [0-5])
    echo "BKP004,1,$(date +%Y%m%d-%H%M%S),Restic snapshots count: $B" >> $F
    ;;
    [0-4][0-9])
    echo "BKP004,0,$(date +%Y%m%d-%H%M%S),Restic snapshots count: $B" >> $F
    ;;
    *)
    echo "BKP004,1,$(date +%Y%m%d-%H%M%S),Restic snapshots count: $B" >> $F
    ;;
    esac
else
    echo "BKP003,0,$(date +%Y%m%d-%H%M%S),No Restic: Skipping" >> $F
    echo "BKP004,0,$(date +%Y%m%d-%H%M%S),No Restic: Skipping" >> $F
fi

# BKP005
export RESTIC_PASSWORD=CHANGERESTICPASSWORD
export RESTIC_REPOSITORY=CHANGERESTICREPOPATH

if [[ $RESTIC_PASSWORD == "" ]]
then
    echo "BKP005,0,$(date +%Y%m%d-%H%M%S),Restic not configurated: Skipping" >> $F
else
    r=$(restic diff $(cat /var/log/restic.log | tail -n 4 | head -n 2 | awk '{ print $1 }') | tail -n 2 | awk '{ print $2 }')

    for i in $r
    do
    	case $i in
    	0.0)
    	echo "BKP005,1,$(date +%Y%m%d-%H%M%S),No change in last 2 snapshots!" >> $F
    	;;
    	*)
    	echo "BKP005,0,$(date +%Y%m%d-%H%M%S)," >> $F
    	;;
    	esac
    done
fi

# NET001
ping -c 2 8.8.8.8
if [[ ! $? -eq 0 ]]
then
    echo "NET001,2,$(date +%Y%m%d-%H%M%S),No Internet Connection" >> $F
else
    echo "NET001,0,$(date +%Y%m%d-%H%M%S)," >> $F
fi

# NET002
ping -c 2 google.it
if [[ ! $? -eq 0 ]]
then
    echo "NET002,2,$(date +%Y%m%d-%H%M%S),DNS Resolution failed" >> $F
else
    echo "NET002,0,$(date +%Y%m%d-%H%M%S)," >> $F
fi

# NET003
# TODO
# netstat -anp | grep -e '.*ESTABLISHED.*' | tee -a $F

# NET004
# TODO
# netstat -nlp | grep 'tcp.*LISTEN.*' | tee -a $F
# netstat -nlp | grep 'udp.*LISTEN.*' | tee -a $F

# UPG001
U=0
case $distro in
debian)
apt-get update
U=$(apt list --upgradeable)
if [[ ${#U} -eq 0 ]]
then
    echo "UPG001,0,$(date +%Y%m%d-%H%M%S)," >> $F
else
    echo "UPG001,1,$(date +%Y%m%d-%H%M%S),Updates available" >> $F
fi
;;
alpine)
apk update
U=$(apk list -u)
if [[ ${#U} -eq 0 ]]
then
    echo "UPG001,0,$(date +%Y%m%d-%H%M%S)," >> $F
else
    echo "UPG001,1,$(date +%Y%m%d-%H%M%S),Updates available" >> $F
fi
;;
fedora)
dnf check-upgrade
U=$(dnf list --upgrade | wc -l)
if [[ ${#U} -eq 0 ]]
then
    echo "UPG001,0,$(date +%Y%m%d-%H%M%S)," >> $F
else
    echo "UPG001,1,$(date +%Y%m%d-%H%M%S),Updates available" >> $F
fi
;;
ol)
dnf check-upgrade
U=$(dnf list --upgrade | wc -l)
if [[ ${#U} -eq 0 ]]
then
    echo "UPG001,0,$(date +%Y%m%d-%H%M%S)," >> $F
else
    echo "UPG001,1,$(date +%Y%m%d-%H%M%S),Updates available" >> $F
fi
;;
*)
echo "UPG001,2,$(date +%Y%m%d-%H%M%S),Distro not compatible with function" >> $F
;;
esac

# SEC001
lynis=0
if [ -e /opt/lynis/lynis ]
then
    lynis=1
    echo "SEC001,0,$(date +%Y%m%d-%H%M%S)," >> $F
else
    echo "SEC001,2,$(date +%Y%m%d-%H%M%S),No lynis binaries" >> $F
fi

# SEC002
if [ $lynis -eq 1 ]
then
    cd /opt/lynis/
    sh lynis audit system > /dev/null
    echo "SEC002,0,$(date +%Y%m%d-%H%M%S),Lynis audit done" >> $F
else
    echo "SEC002,2,$(date +%Y%m%d-%H%M%S),No lynis: Skipping" >> $F
fi

# SEC003
if [ $lynis -eq 1 ]
then
    w=$(cat /var/log/lynis-report.dat | grep warning | sed -e 's/warning\[\]\=\|[,]//g')
    if [[ $w == "" ]]
    then
    echo "SEC003,0,$(date +%Y%m%d-%H%M%S),No Warnings" >> $F
    else
    echo "SEC003,1,$(date +%Y%m%d-%H%M%S),Warnings: $w" >> $F
    fi
else
    echo "SEC003,2,$(date +%Y%m%d-%H%M%S),No lynis: Skipping" >> $F
fi

# SEC004
if [ $lynis -eq 1 ]
then
    w=$(echo $w | sed 's/|.*//g')
    s=$(cat /var/log/lynis-report.dat | grep suggestion | sed -e 's/suggestion\[\]\=\|[,]//g' | grep $w)
    if [[ $s == "" ]]
    then
    echo "SEC004,0,$(date +%Y%m%d-%H%M%S),No Suggestions" >> $F
    else
    echo "SEC004,1,$(date +%Y%m%d-%H%M%S),Suggestions: $s" >> $F
    fi
else
    echo "SEC004,2,$(date +%Y%m%d-%H%M%S),No lynis: Skipping" >> $F
fi

# SYN001
r=3
if [ $(ls /var/log/srvcheck/ | wc -l) -gt 3 ]
then
    n=$(ls /var/log/srvcheck/ | wc -l)
    while [ $n -gt $r ]
    do
        f=$(ls -t /var/log/srvcheck/ | tail -n 1)
        rm /var/log/srvcheck/$f
        echo "SYN001,1,$(date +%Y%m%d-%H%M%S),Log Retention: removed $f" >> $F
        let n--
    done
else
    echo "SYN001,0,$(date +%Y%m%d-%H%M%S)," >> $F
fi

# SYN002
rsync -zav --rsh="ssh -p CHANGEPORT" /var/log/srvcheck/ CHANGEUSER@CHANGESERVER:/var/log/srvcheck/CHANGEDOMAIN/$HOSTNAME/

if [[ ! $? -eq 0 ]]
then
    echo "SYN002,2,$(date +%Y%m%d-%H%M%S),Log Sync Failed" >> $F
else
    echo "SYN002,0,$(date +%Y%m%d-%H%M%S)," >> $F
fi