#!/bin/bash

## - TODO - ##
# V Date Time control
# V Storage space control
# V CPU/RAM Consumption control
# V Running services control
# V Update control
# V Backups control
# V Security check
# V Format data for reporting

# Error leveling:
# [OK] No errors
# [1] Warning, probable future malfunctioning
# [2] Warning, probable ongoing malfunctioning
# [3] Critical Warning, system failures are near!
# [KO] Not functioning, stopped, broken

# Check root permission
p=$(id | awk '{ print $1 }')
if [ $p != "uid=0(root)" ]
then
echo "# Eseguire con privilegi di root! [KO]"
    exit 0
fi

# Check dependencies
if [ ! -e /usr/bin/top ]
then
    echo "# Installare il comando top [KO]"
    exit 0
fi

if [ ! -e /opt/lynis/lynis ]
then
    echo "# Installare lynis [KO]"
    echo "git clone https://github.com/CISOfy/lynis.git"
    exit 0
fi

if [ ! -e /usr/bin/netstat ]
then
    if [ ! -e /bin/netstat ]
    then
        echo "# Installare il comando netstat [KO]"
        echo "apt install net-tools"
        echo "apk add iputils"
        exit 0
    fi
fi

if [ ! -e /usr/bin/restic ]
then
    echo "# Installare il comando restic [KO]"
    echo "apt install restic"
    echo "apk add restic"
    exit 0
fi

# Check report dir
if [ ! -d /var/log/srvcheck ]
then
    mkdir /var/log/srvcheck
fi

# Set report file
F=/var/log/srvcheck/srvchk-$(date +%Y_%m_%d).txt

# Set linux distro! (debian, arch, alpine, oracle)
distro=$(cat /etc/os-release | grep '^ID.*' | sed s/ID=//)

if [[ $distro = 'alpine' ]]
then
    if [ ! -e /usr/bin/coreutils ]
    then
        echo "# Installare il pacchetto coreutils [KO]"
        exit 0
    fi
fi

# Initialize report file
touch $F

# Machine informations
echo -e "##### - $F - #####\n" | tee -a $F
echo -e "## - INFORMAZIONI SULLA MACCHINA - ##\n" | tee -a $F
echo "# - NOME MACCHINA: "$HOSTNAME | tee -a $F
echo "# - VERSIONE KERNEL: "$(uname -s -r) | tee -a $F
echo "# Ore di attivita': "$(uptime | awk '{ print $2 " " $3 " " $4 " " $5 }') | tee -a $F
echo "# Nome distribuzione rilevato: "$distro | tee -a $F

# Internet connection control
echo -e "\n## - CONNESSIONE INTERNET - ##" | tee -a $F
echo "# Rilevamento interfacce di rete..." | tee -a $F
ipv4=$(ip a | grep -e 'inet\W' | sed '/.*lo$/d' | awk '{ print $2 }'| sed 's/\/[0-9][0-9]//')
ipv6=$(ip a | grep -e 'inet\w' | sed '/.*::1\/128.*/d' | awk '{ print $2 }'| sed 's/\/[0-9][0-9]//')

echo -e "\n# Indirizzi ipv4" | tee -a $F
echo $ipv4 | tee -a $F
echo -e "\n# Indirizzi ipv6" | tee -a $F
echo $ipv6 | tee -a $F

ping -c 1 1.1.1.1
if [[ ! $? -eq 0 ]]
then
    echo -e "\n!!! Attenzione !!!! Connessione Internet assente! [KO]\n" | tee -a $F
else
    echo "# Connessione Internet presente. [OK]"
fi

ping -c 1 google.it
if [[ ! $? -eq 0 ]]
then
    echo -e "\n!!! Attenzione !!! DNS non risolve i nomi! [KO]\n" | tee -a $F
else
    echo "# Risoluzione DNS esterna a posto. [OK]"
fi

# Controllo connessioni attive
# Connessioni in uscita
echo -e "\n# Connessioni attive...\n" | tee -a $F
netstat -anp | grep -e '.*ESTABLISHED.*' | tee -a $F

# Processi in ascolto
echo -e "\n# Connessioni in ascolto\n" | tee -a $F
netstat -nlp | grep 'tcp.*LISTEN.*' | tee -a $F
netstat -nlp | grep 'udp.*LISTEN.*' | tee -a $F

# DateTime control
echo -e "\n## - CONTROLLO OROLOGIO DI SISTEMA - ##\n" | tee -a $F

U=$(curl -I -k google.it | grep "Date:" | awk '{ print $3 " " $5 " " $6 }')
L=$(date -u +"%d %Y %T")
if [[ $U != $L ]]
then
    echo -e "\n!!! Attenzione !!! Orologio di sistema non sincronizzato. [3]\n" | tee -a $F
    curl -I -k google.it | grep "Date:" | awk '{ print $3 " " $4 " " $5 " " $6 " - Orario corretto"}' | tee -a $F;echo $(date -u +"%d %b %Y %T")" - Orario di sistema" | tee -a $F
else
    echo "# Orario di sistema sincronizzato [OK]"
fi

# Storage space control
echo -e "\n## - SPAZIO SU DISCO - ##\n" | tee -a $F
s=('.*/$' '.*/home$' '.*/tmp$' '.*/boot$' '.*/share/.*' '.*/bkp$' '.*/mnt/.*')

for i in "${s[@]}"
do
    d=$(df | grep -e $i | awk '{ print $5 }' | sed 's/%//')
    if [[ ! ${#d} -eq 0 ]]
    then
        echo -e "\nMount "$i" Spazio usato: "$d"%" | sed 's/[\.\*$]//g' | tee -a $F
        case $d in
        [1-4][0-9])
        echo "# Spazio disco sufficiente [OK]"
        ;;
        [5-6][0-9])
        echo "# Attenzione, spazio disco in esaurimento! [1]" | tee -a $F
        ;;
        [7-9][0-9])
        echo "### ATTENZIONE! ### Spazio su disco ridotto! [3]" | tee -a $F
        ;;
        100)
        echo "### Errore Critico! Spazio esaurito! [KO]" | tee -a $F
        ;;
        *)
        echo "# Spazio su disco sufficiente [OK]"
        ;;
        esac
    fi
done

# Volume group control
if [ -e /usr/sbin/vgdisplay ]
then
    echo -e "\n## Utilizzo Volume groups" | tee -a $F
    vgdisplay | grep -e 'VG Name.*\|Free.*' | tee -a $F
fi

echo -e "\n## - UTILIZZO RISORSE - ##\n" | tee -a $F

# Memory usage
T=$(free | grep 'Mem.*' | awk '{ print $2}')
U=$(free | grep 'Mem.*' | awk '{ print $3}')
P=$(( U *100 / T ))

echo "# Utilizzo memoria RAM "$P"%" | tee -a $F

case $P in
[5-6][0-9])
echo "# Non Critico, elevato utilizzo memoria RAM! [1]" | tee -a $F
;;
[7-8][0-9])
echo "# Attenzione, Elevato utilizzo memoria RAM! [2]" | tee -a $F
;;
9[0-9])
echo "!!! Attenzione !!! Utilizzo RAM Critico! [3]" | tee -a $F
;;
*)
echo "# Livelli utilizzo RAM nella norma. [OK]"
;;
esac

case $distro in
alpine)
top -bn 1 | head -n 9 | tail -n 6 | tee -a $F
;;
debian)
top -bn 1 -o %MEM | head -n 12 | tail -n 6 | tee -a $F
;;
*)
echo -e "# Distribuzione non supportata. [KO]\n" | tee -a $F
;;
esac

# CPU usage
C=0
case $distro in
alpine)
C=$(top -n 1 | head -n 2 | tail -n 1 | awk '{ print $2 }' | sed 's/%//')
;;
debian)
C=$(top -n 1 | grep '%Cpu.*' | awk '{ print $2 }')
;;
*)
echo -e "# Distribuzione non supportata. [KO]\n" | tee -a $F
;;
esac

echo "# Utilizzo CPU: "$C"%" | tee -a $F

case $C in
[5-7][0-9])
echo "# Attenzione, utilizzo CPU oltre la media [1]" | tee -a $F
;;
[8-9][0-9])
echo "!!! Attenzione !!! Livelli CPU Critici [3]" | tee -a $F
top -bn 1 | head -n 9 | tail -n 6 | tee -a $F
;;
100)
echo "!!! Attenzione !!! Livelli CPU Critici [3]" | tee -a $F
top -bn 1 | head -n 9 | tail -n 6 | tee -a $F
;;
[5-7][0-9],[0-9])
echo "# Attenzione, utilizzo CPU oltre la media [1]" | tee -a $F
top -bn 1 | head -n 9 | tail -n 6 | tee -a $F
;;
[8-9][0-9],[0-9])
echo "!!! Attenzione !!! Livelli CPU Critici [3]" | tee -a $F
top -bn 1 | head -n 9 | tail -n 6 | tee -a $F
;;
*)
echo "# Livelli utilizzo CPU normali [OK]"
;;
esac

case $distro in
alpine)
top -bn 1 | head -n 9 | tail -n 6 | tee -a $F
;;
debian)
top -bn 1 -o %CPU | head -n 12 | tail -n 6 | tee -a $F
;;
*)
echo -e "# Distribuzione non supportata. [KO]\n" | tee -a $F
;;
esac

# Running service control
echo -e "\n## - CONTROLLO SERVIZI - ##\n" | tee -a $F

case $distro in
alpine)
S=$(rc-status | grep -e '.*\[  stopped  \]$' | awk '{ print $1 }')
if [[ ! ${#S} -eq 0 ]]
then
    echo -e "!!! Attenzione !!! Alcuni servizi risultano Stoppati [KO]" | tee -a $F
    echo -e $S"\n" | tee -a $F
else
    echo -e "Servizi in esecuzione normalmente [OK]"
fi
;;
debian)
S=$(systemctl list-units --state=failed | grep -e '.*service$' | awk '{ print $2 }')
if [[ ! ${#S} -eq 0 ]]
then
    echo -e "!!! Attenzione !!! Alcuni servizi risultano Stoppati [KO]" | tee -a $F
    echo -e $S"\n" | tee -a $F
else
    echo -e "Servizi in esecuzione normalmente [OK]"
fi
;;
fedora)
S=$(systemctl list-units --state=failed | grep -e '.*service$' | awk '{ print $2 }')
if [[ ! ${#S} -eq 0 ]]
then
    echo -e "!!! Attenzione !!! Alcuni servizi risultano Stoppati [KO]" | tee -a $F
    echo -e $S"\n" | tee -a $F
else
    echo -e "Servizi in esecuzione normalmente [OK]"
fi
;;
*)
echo -e "Distribuzione non supportata per questo controllo [KO]" | tee -a $F
;;
esac

# Update control
echo -e "\n## - CONTROLLO AGGIORNAMENTI - ##\n" | tee -a $F
U=0

case $distro in
debian)
apt-get update
U=$(apt list --upgradeable)
if [[ ${#U} -eq 0 ]]
then
    echo -e "# Nessun aggiornamento disponibile [OK]\n"
else
    echo -e "# Aggiornamenti disponibili: [1]\n" | tee -a $F
    apt list --upgradeable | tee -a $F
fi
;;
alpine)
apk update
U=$(apk list -u)
if [[ ${#U} -eq 0 ]]
then
    echo -e "# Nessun aggiornamento disponibile [OK]\n"
else
    echo -e "# Aggiornamenti disponibili: [1]\n" | tee -a $F
    apk list -u| tee -a $F
fi
;;
*)
echo "# Controllo aggiornamenti non disponibile per questa distribuzione..." | tee -a $F
;;
esac

# Backups control
echo -e "\n## - CONTROLLO BACKUPS - ##\n" | tee -a $F

echo -e "# Restic Backups...\n" | tee -a $F
if [ -f /var/log/restic.log ]
then 
    B=$(cat /var/log/restic.log | grep -e '.*snapshots$' | tail -n 1 | awk '{ print $1 }')
    T=$(cat /var/log/restic.log | tail -n 3 | head -n 1 | awk '{ print $2 }')
    if [[ ! $T = $(date +%Y-%m-%d) ]]
    then
        echo -e "!!! Attenzione !!! Ultimo backup non e' del giorno corrente [1]\n" | tee -a $F
        if [[ $T = $(date -d 'yesterday' +%Y-%m-%d) ]]
        then
            echo -e "!!! Attenzione !!! Ultimo backup datato a ieri [1]\n" | tee -a $F
        else
            echo -e "!!! Attenzione !!! Ultimo backup datato $T [3]\n" | tee -a $F
        fi
    fi
else
    B=0
    echo -e "\n!!! Attenzione !!! Non e' presente il file log di backup [KO]\n" | tee -a $F
fi

case $B in
0)
echo -e "!!! Attenzione !!! non sono presenti snapshots! [3]\n" | tee -a $F
;;
[1-9])
echo -e "# Attenzione, presenti solo $B snapshots! [2]" | tee -a $F
;;
[1-4][0-9])
echo -e "# Conteggio snapshots nella norma $B. [OK]"
;;
[5-9][0-9])
echo -e "# Attenzione! Conteggio snapshots superiore alla norma $B. [1]" | tee -a $F
;;
*)
echo -e "# Attenzione! Conteggio snapshots superiore alla norma $B. [1]" | tee -a $F
;;
esac

if [ -f /var/log/restic.log ]
then
    echo -e "## - RESTIC LOG - ##\n" | tee -a $F
    cat /var/log/restic.log | tee -a $F
fi

if [ -d /var/lib/vz/dump ]
then
    B=$(ls /var/lib/vz/dump | grep -e '.*zst$' | wc -l)
    echo -e "# Rilevati " $B "backups Proxmox\n" |tee -a $F
    ls /var/lib/vz/dump | grep -e '.*zst$'
    case $B in
    0)
    echo -e "!!! Attenzione !!! non sono presenti backups! [3]\n" | tee -a $F
    ;;
    [1-9])
    echo -e "# Attenzione, presenti solo $B backups! [2]" | tee -a $F
    ;;
    [1-4][0-9])
    echo -e "# Conteggio backups nella norma $B. [OK]"
    ;;
    [5-9][0-9])
    echo -e "# Attenzione! Conteggio snapshots superiore alla norma $B. [1]" | tee -a $F
    ;;
    *)
    echo -e "# Attenzione! Conteggio snapshots superiore alla norma $B. [1]" | tee -a $F
    ;;
    esac
fi

# Security auditing
echo -e "\n## - CONTROLLO SICUREZZA - ##\n" | tee -a $F

cd /opt/lynis/
echo "Controllo di sicurezza in corso..."
sh lynis audit system > /dev/null
echo -e "# --- Attenzione:\n" | tee -a $F
cat /var/log/lynis-report.dat | grep warning | sed -e 's/warning\[\]\=//g' | tee -a $F

echo -e "# --- Suggerimenti:\n" | tee -a $F
cat /var/log/lynis-report.dat | grep suggestion | sed -e 's/suggestion\[\]\=//g' | tee -a $F

# Send report to server! Change the log server name!
rsync -zav /var/log/srvcheck/ myuser@my.server.com:3333/var/log/srvcheck/$HOSTNAME/

# Send report to Telegram account! Change the fields before run!
#domain="Domain"
#bot="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
#chat="XXXXXXXXXXXXXXXX"
#message="Server:%20$HOSTNAME%20Dominio:%20$domain"
#payload="https://api.telegram.org/bot$bot/sendMessage?chat_id=$chat&text=$message"
#curl $payload
#curl -v -F "chat_id=$chat" -F document=@$F https://api.telegram.org/bot$bot/sendDocument


echo -e "\n\nPer leggere subito il log digitare:\n"
echo "less $F"